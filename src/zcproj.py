#!usr/bin/python
# coding=utf-8

import tweecore
from tweecore import DoAuth, UserObj, SearchUser, Status
import boto3
import json
import decimal
import time
from datetime import datetime

# Must config the Access Keys & Region first
# Configure the Access Keys
followlst1 = [698412371170045952, 22967466, 4798538425, 4897578143, 603437170, 77952260, 700901280344989697, 2831316825,
              2802734891, 313623397, 702864890155835396, 4803269658, 4864179183, 3885786254, 2472849300, 984517526,
              2331521334, 4892620387, 4732881770, 4859884847, 27801694, 4824829176, 4834193001, 4861612214, 4718207280,
              701029582669873152, 4782175242, 2368993820, 4855803119, 2200056272, 4809368352, 582695787,
              700987054184763392, 4731117817, 4880494648, 4854927994, 2853724315, 4777250076, 2307616148, 4787160294,
              2233606307, 4873264552, 1360686506, 4689103638, 2455539632, 558418440, 99879684, 499489936, 4881816122,
              4612821416, 4329788488, 1417680302, 1967035405, 4897944839, 612261171, 4799479826, 103809718, 247232426,
              4798704918, 4847865418, 701949565595996160, 49257713, 212159327, 4915238342, 749828113, 4899962162,
              4918708031, 4889766919, 4903125111, 4901283187, 4917316024, 4916081832, 309781613, 4856133099, 149411872,
              4919200514, 523894587, 4897107370, 4776663012, 4890778886, 2727896068, 1948179344, 212435579, 4778294300,
              2470528448, 701327368800116738, 4829992222, 1371030457, 697801383513161728, 2752247673, 3187894194,
              4843708590, 2485702367, 4831646159, 4889878279, 3649171098, 17537140, 4869975858, 4839209514,
              702022436686987264, 343973538, 1631729502, 4925819162, 2836440828, 2991451024, 4654048939, 4714494805,
              4881945214, 4778344699, 401148895, 144131243, 698752968233869313, 4255379713, 4801791669, 4849241211,
              4845058399, 3692960425, 17712130, 700927103882043393, 4848762951, 4891427814, 4863651990, 4548274952,
              302748777, 4901000778, 155928197, 2775930269, 4778380776, 3146371322, 4791610848, 2237479292, 2184535050,
              801643970, 1514874163, 4859280769, 4768549154, 4925893650, 694961001477726209, 4852529953,
              701291144626446336, 4751204846, 4881969297, 2775539274, 33613789, 4787302592, 1679115115, 4878263933,
              4780864873, 3123630980, 4862167400, 2220631975, 82840129, 4851683415, 4902053966, 4807047006, 2402470915,
              605217970, 4883090517, 3240479095, 701058269784113152, 4801999453, 701408799169630208, 4859229783,
              4760612725, 2805155538, 4583480293, 4840641446, 698693070213091329, 3815998753, 2998086907, 1860586134,
              4847545228, 4885970280, 148790699, 3759647835, 701006476207382528, 4913929021, 7778682, 3166547802,
              3313429592, 240503276, 4832633306, 406403442, 4832272798, 4776177859, 4786467553, 4787243070, 4916520810,
              3327996672, 4777931808, 2987018373, 1075779937, 697649075915771904, 564107480, 1970800813, 996656424,
              4877777488, 4901557933, 4790206459, 490152612, 4473717973, 381832702, 1689345300, 3676064537, 2835462313,
              4915022960, 370004455, 3167079811, 773125196, 4866806098, 4904896715, 4832322383, 4798197794, 2791933067,
              4866069243, 412330216, 4812487398, 2593753830, 296590899, 4891593957, 4755733092, 1572231757, 4340757314,
              4454565674, 4782223916, 4377978612, 701197732606640129, 2489504116, 91522401, 2171727078, 48297024,
              2860649567, 622092888, 702722772686876672, 3088552906, 594447009, 4673068735, 293966626, 3855906852,
              2281558375, 36571209, 292687597, 3697697189, 701424013587775490, 4622782403, 3139053464, 16834874,
              4816941074, 702288155546775553, 4921210934, 700622746229694465, 701736669825794048, 4824224567,
              1917274639, 632759274, 1395790920, 4892096318, 4840103738, 4863660026, 701077020399128576, 3263023897,
              4904001836, 697844719573831680, 2472763380, 2868435732, 1016555246, 4921002792, 4837751953, 4832044073,
              4847935577, 388532000, 4916888449, 4777248306, 3026616562, 4914322082, 3775205180, 4915890530, 4901215628,
              701019342947938304, 2352953376, 1362471217, 2388619368, 699221757627146241, 2522129624, 4896933201,
              116628833, 4884159624, 4833956458, 3925350132, 701389396818403333, 99972634, 4898324741, 406832297,
              4833963267, 121669083, 1105479408, 4837763768, 390398617, 700258761630330880, 4865057059, 3520565052,
              3932299399, 701447426033451008, 59724145, 4798879604, 4758472723, 2813927636, 699775375006543872,
              214795494, 4837732874, 156868428, 108176430, 129339940, 1127198778, 4824055942, 3139082869, 637322446,
              700942246460297217, 3823654993, 4556389039, 2721494538, 3170817446, 4918135489, 4810213933, 4643481786,
              18799456, 4916437154, 4162909454, 517568659, 4902278941, 3229450520, 4904408329, 4668346484, 272476121,
              527107430, 158792898, 2949438497, 262658759, 701668764044034048, 4873221268, 37435412, 135392927,
              2384602171, 2381364218, 4845411988, 1934979720, 4776081080, 2839196486, 4847883987, 4890557420,
              701112777658621952, 595231678, 4779504524, 2825737783, 4918964263, 1276240656, 4803055033,
              700982405717340160, 702027783447285760, 701299766777393158, 236196492, 4926206017, 3874945392, 4904897308,
              1558673472, 89363681, 3887976913, 3195012853, 701830478899220481, 4483750573, 230371745, 126851037,
              700877846282113024, 4900772978, 4907628686, 2852236177, 1259867749, 701178910914940928, 4365522793,
              4852981948, 33460318, 4847930739, 603353248, 42801964, 700956352747671552, 701003971469529089, 4831933792,
              3169394389, 4793407154, 2562580527, 701446633549012992, 4904809570, 701027619815477248, 4811314812,
              699570714718765057, 1254834170, 4755785916, 1715186870, 4752371472, 4887083193, 476974171, 742760442,
              4816603632, 4883121552, 3046001325, 2314852544, 2926036725, 4719095286, 4750603596, 4923157852,
              4897697260, 1028660461, 701323565048573953, 4907491674, 4776243973, 104807714, 4608394694, 4877441206,
              4747319425, 1563488059, 4920458953, 4859014437, 4777955544, 415600430, 704260964, 4843232226, 3432419679,
              700917532790693888, 698856235970359296, 4677066403, 52957908, 4830630266, 701178976492982272, 981757549,
              4899813416, 4891617613, 2204446303, 2994675116, 537003419, 4885643826, 4903866617, 14191112, 919277438,
              1079464351, 700901679684685825, 4887236316, 4786119847, 3310260026, 4802525540, 33457583, 4828366458,
              205545728, 4715473887, 3014250508, 701267014698954752, 1665317838, 446611701, 303106817, 465567110,
              4921942879, 695630373825347585, 1181200825, 4862028992, 4882282024, 4385781080, 702972200366649344,
              4681225790, 2329911065, 420153976, 4441675094, 365626509, 4896998619, 491159095, 4901671172, 4916769979,
              421116904, 2393816696, 4797344592, 1099977536, 4882027893, 2520534019, 4579231222, 4647313429, 2258731122,
              203829129, 4800770353, 4866124551, 254894752, 4834762378, 2985447896, 4844100076, 4546104614, 4919891613,
              4821534060, 4803328757, 4812840985, 4542688094, 532013857]
friendlst=[]
SeedLst = [203829129, 45358339]


class InitDynamoDB():
    def __init__(self, tables):
        dynamodb = boto3.resource('dynamodb')
        self.tb = dynamodb.Table(tables)

    def putdata(self, data):
        # if type(data) == str:
        # 	itemdata = self._serialization(json.loads(data))
        # elif type(data) == dict:
        # 	itemdata = self._serialization(data)
        # else:
        # 	return -1
        self.tb.put_item(Item=self._serialization(data))

    def _serialization(self, mapdata):
        tmpmap = {}
        jdump = json.dumps(mapdata)
        if "" in jdump:
            jdump = jdump.replace('""', "null")
        elif '' in jdump:
            jdump = jdump.replace("''", "null")
        mapdata = json.loads(jdump, parse_float=decimal.Decimal)
        for k, v in mapdata.items():
            if v == "":
                tmpmap[k] = None
            elif isinstance(v, float):
                tmpmap[k] = str(v)
            else:
                tmpmap[k] = v
        print tmpmap, "\n\n\n"
        return tmpmap


# class GetuserwithSid():
# 	def __init__(self):
# 		pass

def dosync_twee():
    tbusr = InitDynamoDB("TweeUsers")
    tbstat = InitDynamoDB("Tweestatus")
    tbrel = InitDynamoDB("TweeRel")

    doauth = DoAuth()
    auth = doauth.doauth()
    api = doauth.doapi(auth)

    for seedusr in SeedLst:
        user = UserObj(api, seedusr)
        uinfo = user.get_user_info()

        uinfo["seed"] = True
        tbusr.putdata(uinfo)

        if seedusr == 203829129:
            pass
        else:
            procstatus(tbstat, api, seedusr)

        for pagedata in user.get_followers_page():
            try:

                for item in pagedata:
                    if item['id'] in followlst1:
                        pass
                    else:
                        try:
                            item["seed"] = False
                            tbusr.putdata(item)
                            procstatus(tbstat, api, item["id"])
                        except Exception, e:
                            print Exception, e
                            continue
            except Exception, e:
                print Exception, e
                continue

        for pagedata in user.get_friends_page():
            for item in pagedata:
                try:
                    item["seed"] = False
                    tbusr.putdata(item)
                    procstatus(tbstat, api, item["id"])
                except Exception, e:
                    print Exception, e
                    continue
        relmap = user.show_relids()
        relmap["follows"] += followlst1
        relmap["friends"] += friendlst
        tbrel.putdata(relmap)


def procstatus(table, api, uid):
    status = Status(api, uid)
    for statuspage in status.get_status_page():
        for item in statuspage:
            # print item
            item["userid"] = uid
            # Wed Feb 24 13:15:59 +0000 2016
            try:
                if "created_at" in item:
                    if item["created_at"] != None or item["created_at"] != "":
                        timestr = item["created_at"]
                        dt = datetime.strptime(timestr, '%a %b %d %X +0000 %Y')
                        ts = int(time.mktime(dt.timetuple()))
                        item["created_at_ts"] = ts
                table.putdata(item)
            except Exception, e:
                print Exception, e
                continue


if __name__ == '__main__':
    dosync_twee()


    # tbusr.putdata(mydic)
    # tb = InitDynamoDB("Music")
    # myd = {"fdsa":"fdsa","id":312,"Artist":"fdsfads","SongTitle":"fdsafds"}
    # tb.putdata(myd)
